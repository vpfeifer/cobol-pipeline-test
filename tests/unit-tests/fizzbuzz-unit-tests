*> Unit tests for fizzbuzz.cbl

     display spaces
     display "============================================================"
     display "fizzbuzz.cbl unit tests"

     move "Fizz" to expected
     
     move "It returns 'Fizz' for the number 3 (divisible by 3)" to test-case-name
     move 3 to current-number
     perform 0600-check
    
     move "It returns 'Fizz' for the number 6 (divisible by 3)" to test-case-name
     move 6 to current-number
     perform 0600-check

     move "It returns 'Fizz' for the number 12 (divisible by 3)" to test-case-name
     move 12 to current-number
     perform 0600-check


     move "It returns '4' for the number 4" to test-case-name
     move 4 to current-number
     perform 1000-process-number
     if current-result = "0004"
        display passed test-case-name
     else 
        display failed test-case-name "| expected '4', got <" current-result ">"
        move 4 to retcode
     end-if

     move "It returns 'Buzz' for the number 5 (divisible by 5)" to test-case-name
     move 5 to current-number
     perform 1000-process-number
     if current-result = "Buzz"
         display passed test-case-name
     else 
         display failed test-case-name "| expected <Buzz>, got <" current-result ">"
         move 4 to retcode
     end-if
      
    

    
     move "It returns 'FizzBuzz' for the number 15 (divisible by both 3 and 5)" to test-case-name
     move 15 to current-number
     perform 1000-process-number
     if current-result = "FizzBuzz"
         display passed test-case-name
     else 
         display failed test-case-name "| expected <FizzBuzz>, got <" current-result ">"
         move 4 to retcode
     end-if

     move "It returns 'Buzz' for the number 20 (divisible by 5)" to test-case-name
     move 20 to current-number
     perform 1000-process-number
     if current-result = "Buzz"
         display passed test-case-name
     else 
         display failed test-case-name "| expected <Buzz>, got <" current-result ">"
         move 4 to retcode
     end-if

     display "============================================================"

     move retcode to return-code
     goback.

0600-check.    
     perform 1000-process-number
     if current-result = expected
         display passed test-case-name
     else 
         display failed test-case-name "| expected <" expected ">, got <" current-result ">"
         move 4 to retcode
     end-if  
     .
 